namespace caffe {
GenericWindowData2Layer<Dtype>::~GenericWindowData2Layer<Dtype>() {
}
void GenericWindowData2Layer<Dtype>::ReadMean(){
  if (has_mean_file_) {
  }
  if (has_mean_values_) {
    for (int c = 0; c < this->transform_param_.mean_value_size(); ++c) {
    }
    if (channels_ > 1 && mean_values_.size() == 1) {
      for (int c = 1; c < channels_; ++c) {
      }
    }
  }
}
void GenericWindowData2Layer<Dtype>::ReadWindowFile(){
  if (!(infile >> hashtag >> checkName)) {
  }
	do {
		for (int i=0; i < img_group_size_; i++){
			if (cache_images_) {
				if (!ReadFileToDatum(image_path, &datum)) {
				}
			}
			if (image_index % 1000 == 0) {
			}
    }
		for (int l=0; l < label_size_; l++){
		}
  } while (infile >> hashtag >> image_index);
	for (int i=0; i<img_group_size_; i++){
	}
}
      const vector<Blob<Dtype>*>& top) {
	if (this->layer_param_.generic_window_data_param().is_gray()){
	}
	else{
	}
		if (is_random_crop_){
		}else{
		} 
	}
	for (int i = 0; i < this->PREFETCH_COUNT; ++i) {
	} 
  for (int i = 0; i < this->PREFETCH_COUNT; ++i) {
  }
	for (int ii=0; ii<img_group_size_; ii++){
	} 
}
unsigned int GenericWindowData2Layer<Dtype>::PrefetchRand(int streamNum) {
}
void GenericWindowData2Layer<Dtype>::ReadData(int streamNum, Dtype* top_data) {
  if (this->has_mean_file_) {
  }
	if (windows_.size() < num_examples_){
	}	
	for (int dummy = 0; dummy < num_samples; ++dummy) {
		if (this->cache_images_) {
		} else {
			if (channels_ == 1){ 
			}
			else{
			}
			if (!cv_img.data) {
			}
		}
		if (is_random_crop_){
		}else{
		}
		if (context_pad > 0 || use_square) {
			if (use_square) {
				if (half_height > half_width) {
				} else {
				}
			}
		}
		if (do_mirror) {
		}
		for (int h = 0; h < cv_cropped_img.rows; ++h) {
			for (int w = 0; w < cv_cropped_img.cols; ++w) {
				for (int c = 0; c < channels; ++c) {
					if (this->has_mean_file_) {
					} else {
						if (this->has_mean_values_) {
						} else {
						}
					}
				}
			}
		}
		for (int h = 0; h < cv_cropped_img.rows; ++h) {
			for (int w = 0; w < cv_cropped_img.cols; ++w) {
				for (int c = 0; c < channels; ++c) {
					if (this->has_mean_file_) {
					} else {
						if (this->has_mean_values_) {
						} else {
						}
					}
				}
			}
		}
		for (int c = 0; c < channels; ++c) {
			for (int h = 0; h < crop_size; ++h) {
				for (int w = 0; w < crop_size; ++w) {
				}
			}
		}
		if (read_count_ == num_examples_){
		}
	}
}
void GenericWindowData2Layer<Dtype>::load_batch(Batch<Dtype>* batch) {
	for (int n=0; n < batch_size_; n++){
		for (int l=0; l < label_size_; l++){
		}
		if (read_count_ >= num_examples_){
		}
	}
	for (int i=0; i<img_group_size_; i++){
	}
	for (int n=0; n < batch_size_; n++){
		for (int i=0; i < img_group_size_; i++){
		}	
	}
	//for (int i = 0; i < img_group_size_; i++){
	//}
}
}  // namespace caffe
