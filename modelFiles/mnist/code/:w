from subprocess import Popen, PIPE

def modify_source(lines, traindb, testdb):
	count = 0
	dataMode = False
	for (i,l) in enumerate(lines):
		if 'data_param' in l:
			dataMode = True
		if dataMode and 'source' in l:
			if count == 0:
				newLine = 'source: "%s"' % traindb
				lines[i] = newLine
			if count == 1:
				newLine = 'source: "%s"' % testdb
				lines[i] = newLine

		if dataMode and '}' in l:
			dataMode = False
			count += 1
			if count == 2:
				break

		if count ==1 and 'include' in l and 'phase' in l:
			assert 'TRAIN' in l

	return lines


def write_file(lines, fileName):
	with open(fileName,'w') as f:
		for l in lines:
			f.write('%s \n' % l)


def read_file(fileName):
	with open(fileName,'r') as f:
		lines = f.readlines()
	return lines


def modify_snapshot_prefix(lines, prefix):
	for (i,l) in enumerate(lines):
		if 'snapshot_prefix' in l:
			newLine = 'snapshot_prefix: "%s"' % prefix
			lines[i] = newLine
			break
	return lines
		
	
def get_leveldb_names(trainStr, valStr):
	dbDir = '/data1/pulkitag/mnist_rotation/leveldb_store/'
	trainDb = dbDir + 'mnist_rotation_train_' + trainStr + '_leveldb'
	valDb   = dbDir + 'mnist_rotation_val_' + valStr + '_leveldb'
	return trainDb, valDb


def get_hdf5_names(trainStr, valStr):
	hdf5Dir = '/data1/pulkitag/mnist_rotation/'
	trainH5 = hdf5Dir + 'mnist_%s.hdf5' % trainStr
	valH5   = hdf5Dir + 'mnist_%s.hdf5' % valStr
	return trainH5, valH5


def get_names(numTrain, numVal, trainDigits, valDigits):
	trainStr = ''
	valStr   = ''
	for t in trainDigits:
		trainStr = trainStr + '%d_' % t
	for v in valDigits:
		valStr   = valStr   + '%d_'	% v

	trainStr = trainStr + '%dK' % int(numTrain/1000)
	valStr   = valStr   + '%dK' % int(numVal/1000)
	expStr = 'train_%s_val_%s' % (trainStr, valStr)
	
	snapDir = '/data1/pulkitag/snapshots/mnist_rotation/exp_%s/' % expStr
	if not os.path.exists(snapDir):
		os.makedirs(snapDir)
	snapPrefix = snapDir + 'mnist_'

	return trainStr, valStr, expStr, snapPrefix


def h52db(h5Name, dbName):
	args = ['../../../build/tools/hdf52leveldb.bin', h5Name, dbName]
	p1 = Popen(args,shell=True,stdout=PIPE)
	op = p1.communicate()[0]
	

def make_experiment(numTrain=1e+6, numVal=1e+4, \
				trainDigits = [2, 4, 6, 7, 8, 9], valDigits = [0, 1, 3 ,5]):

	trainStr, valStr, expStr, snapPrefix = get_names(numTrain, numVal, trainDigits, valDigits) 
	
	#Names of HDF5 files
	trainH5, valH5 = get_hdf5_names(trainStr, valStr)

	#Names of Leveldbs
	trainDb, valDb = get_leveldb_names(trainStr, valStr)

	#Convert HDF% into leveldb
	h52db(trainH5, trainDb)
	h52db(valH5, valDb)
	
	expDir = '../rotation_%s/' % expStr
	baseDir = '../base_files/'	
	if not os.path.exists(expDir):
		os.makedirs(expDir)
	
	defStr  = 'mnist_siamese_train_test.prototxt'
	fineStr = 'mnist_train_test_finetune.prototxt' 	

	#Rotation Training Net-Def
	defFile1 = baseDir + defStr
	defFile2 = expDir + defStr
	defLines = read_file(defFile1)
	defLines = modify_source(defLines, trainDb, valDb)
	write_file(defLines, defFile2) 

	#Finetune Net-Def
	fineFile1 = baseDir + fineStr
	fineFile2 = expDir + fineStr	
	fineLines = read_file(fineFile1)
	write_file(fineLines, fineFile2)

	#Rotation Trainin Solver File
	solvStr = 'mnist_siamese_solver.prototxt'
	solvFile1 = baseDir + solvStr
	solvFile2 = expDir  + solvStr	
	solvLines = read_file(solvFile1)
	solvLines = modify_snapshot_prefix(solvLines, snapPrefix)
	write_file(solvLines, solvFile2)

	#Finetune Solver File
	fSolvStr = 'mnist_finetune_solver.prototxt'
	fSolvFile1 = baseDir + fSolvStr
	fSolvFile2 = expDir  + fSolvStr
	snapDir    = '/data1/pulkitag/snapshots/mnist/finetune_rot/exp_%s/' % expStr
	if not os.path.exists(snapDir):
		os.makedirs(snapDir)		
	snapPrefixFine = snapDir + 'mnist_finetune_rot'
	fSolvLines = read_file(fSolvFile1)
	fSolvLines = modify_snapshot_prefix(fSolvLines, snapPrefixFine)
	write_file(fSolvLines, fSolvFile2)

	 
